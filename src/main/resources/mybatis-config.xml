<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration
        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>

    <settings>
        <setting name="cacheEnabled" value="true"/>
        <setting name="lazyLoadingEnabled" value="true"/>
        <!--<setting name="autoMappingBehavior" value="PARTIAL"/>-->
    </settings>

    <!--  引入properties资源文件的一种方式 外部导入  -->
    <!-- 指定properties配置文件， 我这里面配置的是数据库相关 -->
    <!--<properties resource="dbConfig.properties"></properties> -->

    <!--  properties资源文件的第二种方式 直接配置  -->
    <!--<properties>-->
    <!--<property name="driver" value="com.mysql.jdbc.Driver"/>-->
    <!--<property name="url" value="jdbc:mysql://localhost:3306/test1"/>-->
    <!--<property name="username" value="root"/>-->
    <!--<property name="password" value="root"/>-->
    <!--</properties>-->

    <!-- 指定Mybatis使用log4j -->
    <!--<settings>-->
    <!--<setting name="logImpl" value="LOG4J"/>-->
    <!--</settings>-->

    <typeAliases>
        <!--    这种方式直接扫描，别名为一个实体的驼峰表示    -->
        <typeAlias alias="author" type="com.dm.entity.AuthorEntity"/>
        <typeAlias alias="article" type="com.dm.entity.ArticleEntity"/>
    </typeAliases>



    <!--
      在向数据库存储或读取数据时，我们需要将数据库字段类型和 Java 类型进行一个转换。
      比如数据库中有CHAR和VARCHAR等类型，但 Java 中没有这些类型，不过 Java 有String类型。
      所以我们在从数据库中读取 CHAR 和 VARCHAR 类型的数据时，就可以把它们转成 String 。
      在 MyBatis 中，数据库类型和 Java 类型之间的转换任务是委托给类型处理器TypeHandler去处理的。
      -->
    <typeHandlers>
        <!--
            当配置package的时候，mybatis会去配置的package扫描TypeHandler
            <package name="com.dy.demo"/>
         -->

        <!--   数据库中值与枚举对应关系解析   -->
        <typeHandler jdbcType="TINYINT"
                     javaType="com.dm.enums.ArticleTypeEnum"
                     handler="com.dm.typeHandler.ArticleTypeHandler"/>

        <!-- handler属性直接配置我们要指定的TypeHandler -->
        <!--<typeHandler handler=""/>-->

        <!-- javaType 配置java类型，例如String, 如果配上javaType, 那么指定的typeHandler就只作用于指定的类型 -->
        <!--<typeHandler javaType="" handler=""/>-->

        <!-- jdbcType 配置数据库基本数据类型，例如varchar, 如果配上jdbcType, 那么指定的typeHandler就只作用于指定的类型  -->
        <!--<typeHandler jdbcType="" handler=""/>-->
        <!-- 由于自定义的TypeHandler在定义时已经通过注解指定了jdbcType, 所以此处不用再配置jdbcType -->
        <!--<typeHandler handler="ExampleTypeHandler"/>-->

        <!-- 也可两者都配置 -->
        <!--<typeHandler javaType="" jdbcType="" handler=""/>-->

    </typeHandlers>

    <!--<objectFactory type="mybatis.service.ExampleObjectFactory">-->
    <!--<property name="someProperty" value="100"/>-->
    <!--</objectFactory>-->

    <!--<plugins>-->
    <!--<plugin interceptor="org.mybatis.example.ExamplePlugin">-->
    <!--<property name="someProperty" value="100"/>-->
    <!--</plugin>-->
    <!--</plugins>-->

    <plugins>
        <plugin interceptor="com.dm.plugin.ExamplePlugin">
            <property name="key" value="value"/>
        </plugin>
    </plugins>

    <environments default="development">
        <environment id="development">
            <transactionManager type="JDBC"/>
            <dataSource type="POOLED">

                <property name="driver" value="com.mysql.jdbc.Driver"/>
                <property name="url" value="jdbc:mysql://localhost:3306/test1"/>
                <property name="username" value="root"/>
                <property name="password" value="123456"/>


                <!-- 上面指定了数据库配置文件， 配置文件里面也是对应的这四个属性 -->
                <!--<property name="driver" value="${driver}"/>-->
                <!--<property name="url" value="${url}"/>-->
                <!--<property name="username" value="${username}"/>-->
                <!--<property name="password" value="${password}"/>-->

            </dataSource>
        </environment>

        <!-- 我再指定一个environment -->
        <environment id="test">
            <transactionManager type="JDBC"/>
            <dataSource type="POOLED">
                <property name="driver" value="com.mysql.jdbc.Driver"/>
                <property name="url" value="jdbc:mysql://localhost:3306/test1"/>
                <property name="username" value="root"/>
                <property name="password" value="123456"/>
            </dataSource>
        </environment>
    </environments>


    <!-- 映射文件，mybatis精髓， 后面才会细讲 -->
    <mappers>
        <!-- 第一种方式：通过resource指定 -->
        <mapper resource="mapper/authorDao.xml"/>
        <mapper resource="mapper/articleDao.xml"/>
<!--        <mapper resource="mapper/studentDao.xml"/>-->
<!--        <mapper resource="mapper/courseDao.xml"/>-->


        <!-- 第二种方式， 通过class指定接口，进而将接口与对应的xml文件形成映射关系
                不过，使用这种方式必须保证 接口与mapper文件同名(不区分大小写)，
                我这儿接口是UserDao,那么意味着mapper文件为UserDao.xml
        <mapper class="com.dy.dao.UserDao"/>
         -->

        <!-- 第三种方式，直接指定包，自动扫描，与方法二同理
        <package name="com.dy.dao"/>
        -->
        <!-- 第四种方式：通过url指定mapper文件位置
        <mapper url="file://........"/>
         -->
    </mappers>

</configuration>